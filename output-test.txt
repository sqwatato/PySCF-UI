#INFO: **** input file is /Users/jaydenl/Dev/ASDRP/QCHEM/PySCF-UI/PySCFUI.py ****
import streamlit as st
import streamlit.components.v1 as components
from pyscf import gto, scf
from streamlit.runtime.scriptrunner import add_script_run_ctx
import threading
import time
from stmol import *
import py3Dmol
from rdkit import Chem
from rdkit.Chem import rdDetermineBonds
from rdkit.Chem.rdmolfiles import MolFromXYZFile
from rdkit.Chem import Descriptors, AllChem
from rdkit.Chem.Draw import MolToImage
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from collections import defaultdict
import altair as alt
import os
from pyscf.hessian import thermo
from streamlit_extras.row import row
from utils import getAtomicToMoleculeName
# R^2
from sklearn.metrics import r2_score
import requests
import timeit

st.set_page_config(
    page_title="PySCF UI",
    page_icon="ðŸ“ˆ",
)

# api_url = "http://0.0.0.0:8000/calculate"
moleculeNames = getAtomicToMoleculeName()
trend_threshold = 0.95

if 'queue' not in st.session_state:
    st.session_state['queue'] = []
if 'results' not in st.session_state:
    st.session_state['results'] = []
if 'computing' not in st.session_state:
    st.session_state['computing'] = False

# get all files in directory names precomputed_molecules:
precomputed_molecules = list(map(lambda x: x.split(
    ".")[0], os.listdir("precomputed_molecules")))


def compute_pyscf(atom, basis_option, verbose_option, temperature, pressure):
    # print(atom)
    # print(basis_option)
    # print(verbose_option)
    mol = gto.Mole()
    mol.atom = atom
    mol.basis = basis_option
    mol.verbose = verbose_option
    # mol.verbose = int(verbose_option[0])
    mol.output = 'output-test.txt'
    mol.build()

    # mf = scf.RHF(mol)
    # mf.kernel()
    mf =mol.UHF().run()
    hessian = mf.Hessian().kernel()
    harmanalysis = thermo.harmonic_analysis(mf.mol, hessian)
    thermo_info =  thermo.thermo(mf, harmanalysis['freq_au'], temperature, pressure)
    
    outputFile = open("output-test.txt", "r")
    # Extract energy and time information
    scf_cpu_time = None
    scf_wall_time = None
    hessian_cpu_time = None
    hessian_wall_time = None
    energy = None
    for line in outputFile.readlines():
        if line.startswith("    CPU time for SCF"):
            words = [i for i in line.split() if i]
            # ['CPU', 'time', 'for', 'SCF', '3.00', 'sec,', 'wall', 'time', '0.51', 'sec']
            scf_cpu_time = float(words[4])
            scf_wall_time = float(words[8])

        # elif line.startswith("converged SCF energy = "):
        #     energy = float([i for i in line.split() if i != ''][4])
        elif line.startswith("    CPU time for UHF hessian"):
            words = [i for i in line.split() if i]
            # ['CPU', 'time', 'for', 'UHF', 'hessian', '7.12', 'sec,', 'wall', 'time', '4.87', 'sec']
            hessian_cpu_time = float(words[5])
            hessian_wall_time = float(words[9])
    
    #Helmholtz Free Energy
    F_elec = (thermo_info['E_elec'][0] - temperature * thermo_info['S_elec' ][0], 'Eh')
    F_trans = (thermo_info['E_trans'][0] - temperature * thermo_info['S_trans'][0], 'Eh')
    F_rot = (thermo_info['E_rot'][0] - temperature * thermo_info['S_rot'][0], 'Eh')
    F_vib = (thermo_info['E_vib'][0] - temperature * thermo_info['S_vib'][0], 'Eh')
    F_tot = (F_elec[0] + F_trans[0] + F_rot[0] + F_vib[0], 'Eh') 
    
    #Massieu Potential/Helmholtz Free Entropy
    Î¦_elec = (F_elec[0]/(-1*temperature), 'Eh/K')
    Î¦_trans = (F_trans[0]/(-1*temperature), 'Eh/K')
    Î¦_rot = (F_rot[0]/(-1*temperature), 'Eh/K')
    Î¦_vib = (F_vib[0]/(-1*temperature), 'Eh/K')
    Î¦_tot = (F_tot[0]/(-1*temperature), 'Eh/K')    
    
    #Planck Potential/Gibbs Free Entropy
    Îž_elec = (thermo_info['G_elec'][0]/(-1*temperature), 'Eh/K')
    Îž_trans = (thermo_info['G_trans'][0]/(-1*temperature), 'Eh/K')
    Îž_rot = (thermo_info['G_rot'][0]/(-1*temperature), 'Eh/K')
    Îž_vib = (thermo_info['G_vib'][0]/(-1*temperature), 'Eh/K')
    Îž_tot = (thermo_info['G_tot'][0]/(-1*temperature), 'Eh/K')   
    
    data = {
        # 'energy': energy,
        'SCF CPU Runtime': scf_cpu_time,
        'SCF Wall Runtime': scf_wall_time,
        'Hessian CPU Runtime': hessian_cpu_time,
        'Hessian Wall Runtime': hessian_wall_time,
        'Converged SCF-HF Nuclear Energy (Ha)': mf.energy_nuc(),
        'Converged SCF-HF Electronic Energy (Ha)': mf.energy_elec(),
        'Converged SCF-HF Total Energy (Ha)': mf.energy_tot(),
        # thermodynamic data
        # Heat Capacity
        'Constant Volume Heat Capacity (Ha/K)': thermo_info['Cv_tot'][0],
        'Constant Pressure Heat Capacity (Ha/K)': thermo_info['Cp_tot'][0],
        'Zero-Point Energy (Ha)': thermo_info['ZPE'][0],
        '0K Internal Energy (Ha)': thermo_info['E_0K'][0],
        'Internal Energy (at given T) (Ha)': thermo_info['E_tot'][0],
            'Electronic Internal Energy (Ha)': thermo_info['E_elec'][0],
            'Vibrational Internal Energy (Ha)': thermo_info['E_vib'][0],
            'Translational Internal Energy (Ha)': thermo_info['E_trans'][0],
            'Rotational Internal Energy (Ha)': thermo_info['E_rot'][0],
        # enthalpy
        'Enthalpy (Ha)': thermo_info['H_tot'][0],
            'Electronic Enthalpy (Ha)': thermo_info['H_elec'][0],
            'Vibrational Enthalpy (Ha)': thermo_info['H_vib'][0],
            'Translational Enthalpy (Ha)': thermo_info['H_trans'][0],
            'Rotational Enthalpy (Ha)': thermo_info['H_rot'][0],
        # gibbs free energy
        'Gibbs Free Energy (Ha)': thermo_info['G_tot'][0],
            'Electronic Gibbs Free Energy (Ha)': thermo_info['G_elec'][0],
            'Vibrational Gibbs Free Energy (Ha)': thermo_info['G_vib'][0],
            'Translational Gibbs Free Energy (Ha)': thermo_info['G_trans'][0],
            'Rotational Gibbs Free Energy (Ha)': thermo_info['G_rot'][0],
        # Helmholtz free energy
        'Helmholtz Free Energy (Ha)': F_tot[0],
            'Electronic Helmholtz Free Energy (Ha)': F_elec[0],
            'Vibrational Helmholtz Free Energy (Ha)': F_vib[0],
            'Translational Helmholtz Free Energy (Ha)': F_trans[0],
            'Rotational Helmholtz Free Energy (Ha)': F_rot[0],
        # Entropy
        'Entropy (Ha/K)': thermo_info['S_tot'][0],
            'Electronic Entropy (Ha/K)': thermo_info['S_elec'][0],
            'Vibrational Entropy (Ha/K)': thermo_info['S_vib'][0],
            'Translational Entropy (Ha/K)': thermo_info['S_trans'][0],
            'Rotational Entropy (Ha/K)': thermo_info['S_rot'][0],
        # Massieu Potential/Helmholtz Free Entropy
        'Massieu Potential/Helmholtz Free Potential (Ha/K)': Î¦_tot[0],
            'Electronic Massieu Potential/Helmholtz Free Potential (Ha/K)': Î¦_elec[0],
            'Vibrational Massieu Potential/Helmholtz Free Potential (Ha/K)': Î¦_vib[0],
            'Translational Massieu Potential/Helmholtz Free Potential (Ha/K)': Î¦_trans[0],
            'Rotational Massieu Potential/Helmholtz Free Potential (Ha/K)': Î¦_rot[0],
        # Planck Potential/Gibbs Free Entropy
        'Planck Potential/Gibbs Free Potential (Ha/K)': Îž_tot[0],
            'Electronic Planck Potential/Gibbs Free Potential (Ha/K)': Îž_elec[0],
            'Vibrational Planck Potential/Gibbs Free Potential (Ha/K)': Îž_vib[0],
            'Translational Planck Potential/Gibbs Free Potential (Ha/K)': Îž_trans[0],
            'Rotational Planck Potential/Gibbs Free Potential (Ha/K)': Îž_rot[0],
    }

    return data


def getMoleculeName(atom):
    d = {}
    for line in atom.split("\n"):
        try:
            name = line.split()[0]
            if name in d:
                d[name] += 1
            else:
                d[name] = 1
        except:
            pass
    name = ""
    for key,value in d.items():
        if value > 1:
            name += key + str(value)
        else:
            name += key
    return name


# Streamlit layout
st.title("PySCF")

# Function to process the uploaded text file


def process_text_file(uploaded_file):
    if uploaded_file is not None:
        # Read the contents of the file
        text_contents = uploaded_file.getvalue().decode("utf-8")
        return text_contents
    else:
        return None


def addToQueue(atom, basis):
    st.session_state['queue'].append((atom, basis))


tabDatabase, tabTextInput, tabFileInput = st.tabs(
    ["Database", "Text Input", "File Input"])

basis_option = st.selectbox(
    "Basis", ["cc-pVTZ", "cc-pVDZ", "cc-pVQZ", "cc-pV5Z", "sto-3g"])
# verbose_option = st.selectbox("Verbose", index=2, options=[
                            #   "3, energy only", "4, cycles and energy", "5, cycles energy and runtime", "6", "7", "8", "9, max"])

verbose_option = st.slider("Verbose", min_value=3, max_value=9, value=5)

#Second Input (NEW) - Pressure of the system
# pressure = 101325 #in Pascals (Pa), 101325 Pa = 1 atm
#Third Input (NEW) - Temperature of the system
# temperature = 298.15 #in K, 298.15K = room temperature (25 degrees Celsius) 
thermo_row = row(2)
temp = thermo_row.number_input("Temperature (K)", min_value=0.0, value=298.15)
press = thermo_row.number_input("Pressure (Pa)", min_value=0.0, value=101325.0)

with tabDatabase:
    selectedMolecule = st.selectbox(
        'Search Molecule Database', precomputed_molecules)
    if st.button('Add to Queue', use_container_width=True, key="db"):
        if selectedMolecule:
            parseDatafile = open(
                "precomputed_molecules/" + selectedMolecule + ".geom.txt", "r").readlines()[4:]
            parseDatafile = "\n".join(parseDatafile[:-1])
            addToQueue(parseDatafile, basis_option)
        else:
            st.warning(
                "Please select a molecule using dropdown menu or inputting a text file.")

with tabTextInput:
    # Create a Streamlit button which gives example
    with st.expander("See Example Input"):
        st.write("C 0.0000000 0.0000000 0.0000000")
        st.write("H 0.6311940 0.6311940 0.6311940")
        st.write("H -0.6311940 -0.6311940 0.6311940")
        st.write("H -0.6311940 0.6311940 -0.6311940")
        st.write("H 0.6311940 -0.6311940 -0.631194")
    # Fills xyz_input text area to the contents of the uploaded file
    xyz_input = st.text_area("XYZ Input", key="textxyz")

    if st.button('Add to Queue', use_container_width=True, key="text"):
        if xyz_input:
            addToQueue(xyz_input, basis_option)
        else:
            st.warning(
                "Please provide an XYZ input using the text box or inputting a text file.")

with tabFileInput:
    # Create a Streamlit button which gives example
    with st.expander("See Example Input"):
        st.write("C 0.0000000 0.0000000 0.0000000")
        st.write("H 0.6311940 0.6311940 0.6311940")
        st.write("H -0.6311940 -0.6311940 0.6311940")
        st.write("H -0.6311940 0.6311940 -0.6311940")
        st.write("H 0.6311940 -0.6311940 -0.631194")
    # Display file uploader for a single text file and processes it
    uploaded_file = st.file_uploader("Upload a XYZ input", type=["txt"])
    text_contents = process_text_file(uploaded_file)
    xyz_input = st.text_area(
        "XYZ Input", value=text_contents, key="filexyz") if text_contents else None
    if st.button('Add to Queue', use_container_width=True, key="filequeue"):
        if text_contents:
            addToQueue(text_contents, basis_option)
        else:
            st.warning(
                "Please provide an XYZ input using file uploader")

col1, col2, col3, col4 = st.columns(4, gap="small")

# if col1.button("Add to Queue"):
#     if xyz_input:
#         addToQueue(xyz_input)
#     else:
#         st.warning(
#             "Please provide an XYZ input using the text box or inputting a text file.")

# Computes only if something is added to the queue; grayed out otherwise
compute_disabled = len(st.session_state['queue']) == 0
if st.button("Compute", disabled=compute_disabled, type="primary", use_container_width=True) or st.session_state['computing'] == True:
    if len(st.session_state['queue']) > 0:
        with st.spinner("Computing " + getMoleculeName(st.session_state['queue'][0][0]) + "..."):
            st.session_state['computing'] = True
            atom = st.session_state['queue'][0][0]
            basis = st.session_state['queue'][0][1]
            st.session_state['queue'].pop(0)
            # st.write("Computing...")
            # progress_text = "Computing..."
            # my_bar = st.progress(0, text=progress_text)

            # for percent_complete in range(100):
            #     time.sleep(0.01)
            #     my_bar.progress(percent_complete + 1, text=progress_text)
            # time.sleep(1)
            # my_bar.empty()

            # Delete empty lines
            parsed = [line for line in atom.splitlines() if line.strip() != ""]
            xyz = "\n".join(parsed)
            mol = f"{len(parsed)}\nname\n{str(xyz)}"

            # output xyz into molecule.xyz file
            with open('molecule.xyz', 'w') as f:
                f.write(f"{len(parsed)}\nhi\n{str(xyz)}")

            raw_mol = MolFromXYZFile('molecule.xyz')
            rdkit_mol = Chem.Mol(raw_mol)
            rdDetermineBonds.DetermineBonds(rdkit_mol, charge=0)
            tmpmol = Chem.AddHs(rdkit_mol)
            AllChem.EmbedMolecule(tmpmol)
            smiles = Chem.MolToSmiles(tmpmol)
            start = timeit.default_timer()
            data = compute_pyscf(
                atom, basis, verbose_option, temp, press)
            total_time = timeit.default_timer() - start
            
            # tdict = {"atom": atom, "basis_option": basis, "verbose_option": verbose_option, "temperature": temp, "pressure": press}
            # response = requests.post(api_url, params=tdict)
            
            # if response.status_code == 200:
            #     data = response.json()
            #     print("Yay, it worked!")
            # else:
            #     print(f"Error: {response.status_code} - {response.text}")   
            data['Atoms'] = rdkit_mol.GetNumAtoms()
            data['Bonds'] = rdkit_mol.GetNumBonds()
            data['Rings'] = rdkit_mol.GetRingInfo().NumRings()
            data['Weight'] = Descriptors.MolWt(rdkit_mol)
            data['Molecule'] = mol
            data['Rdkit Molecule'] = rdkit_mol
            data['Basis'] = basis
            data['Molecule Name'] = getMoleculeName(atom)
            data['Smiles'] = smiles
            data['Real Compute Time'] = total_time
            
            st.session_state['results'].append(data)
            st.rerun()
            
    elif st.session_state['computing'] == True:
        st.session_state['computing'] = False
    else:
        st.warning("Please add an XYZ input to the queue.")

if 'queue' in st.session_state:
    st.subheader("Queue")
    for queue_item in st.session_state['queue']:
        st.write(f"{getMoleculeName(queue_item[0])} | {queue_item[1]}")


tab1, tab2, tab3 = st.tabs(['Results', 'View Graphs', 'View Logs'])

with tab1:
    if 'results' in st.session_state:
        st.subheader("Results")
        st.text("Total Real Runtime: " + str(round(sum(x['Real Compute Time'] for x in st.session_state['results']),2)) + "s")
        st.text("Total Log CPU Runime: " + str(round(sum(x['SCF CPU Runtime'] + x['Hessian CPU Runtime'] for x in st.session_state['results']),2)) + "s")
        st.text("Total Log Wall Runtime: " + str(round(sum(x['SCF Wall Runtime'] + x['Hessian Wall Runtime'] for x in st.session_state['results']),2)) + "s")
        st.text("Log SCF Wall Runtime: " + str(round(sum(x['SCF Wall Runtime'] for x in st.session_state['results']),2)) + "s")
        st.text("Log Hessian Wall Runtime: " + str(round(sum(x['Hessian Wall Runtime'] for x in st.session_state['results']),2)) + "s")
        
        
        for result_item in st.session_state['results']:
            data = result_item
            energy = {
                'Internal Energy (E - Ha)':[data['Internal Energy (at given T) (Ha)'],data['Electronic Internal Energy (Ha)'],data['Vibrational Internal Energy (Ha)'],data['Translational Internal Energy (Ha)'],data['Rotational Internal Energy (Ha)']],
                'Helmholtz Free Energy (F - Ha)':[data['Helmholtz Free Energy (Ha)'],data['Electronic Helmholtz Free Energy (Ha)'],data['Vibrational Helmholtz Free Energy (Ha)'],data['Translational Helmholtz Free Energy (Ha)'],data['Rotational Helmholtz Free Energy (Ha)']],
                'Gibbs Free Energy (G - Ha)':[data['Gibbs Free Energy (Ha)'],data['Electronic Gibbs Free Energy (Ha)'],data['Vibrational Gibbs Free Energy (Ha)'],data['Translational Gibbs Free Energy (Ha)'],data['Rotational Gibbs Free Energy (Ha)']],
                'Enthalpy (H - Ha)':[data['Enthalpy (Ha)'],data['Electronic Enthalpy (Ha)'],data['Vibrational Enthalpy (Ha)'],data['Translational Enthalpy (Ha)'],data['Rotational Enthalpy (Ha)']],  
            }
            pd.set_option("display.precision", 16)
            enerdf = pd.DataFrame(energy, index = ["Total","Electronic","Vibrational","Translational","Rotational"])
            
            entropy = {
                'Entropy (S - Ha/K)':[data['Entropy (Ha/K)'],data['Electronic Entropy (Ha/K)'],data['Vibrational Entropy (Ha/K)'],data['Translational Entropy (Ha/K)'],data['Rotational Entropy (Ha/K)']],
                'Helmholtz Free Entropy (Î¦ - Ha/K)':[data['Massieu Potential/Helmholtz Free Potential (Ha/K)'],data['Electronic Massieu Potential/Helmholtz Free Potential (Ha/K)'],data['Vibrational Massieu Potential/Helmholtz Free Potential (Ha/K)'],data['Translational Massieu Potential/Helmholtz Free Potential (Ha/K)'],data['Rotational Massieu Potential/Helmholtz Free Potential (Ha/K)']],
                'Gibbs Free Entropy (Îž - Ha/K)':[data['Planck Potential/Gibbs Free Potential (Ha/K)'],data['Electronic Planck Potential/Gibbs Free Potential (Ha/K)'],data['Vibrational Planck Potential/Gibbs Free Potential (Ha/K)'],data['Translational Planck Potential/Gibbs Free Potential (Ha/K)'],data['Rotational Planck Potential/Gibbs Free Potential (Ha/K)']],
            }
            
            excluded_keys = ['Internal Energy (at given T) (Ha)', 'Electronic Internal Energy (Ha)', 'Vibrational Internal Energy (Ha)', 'Translational Internal Energy (Ha)', 'Rotational Internal Energy (Ha)', 'Helmholtz Free Energy (Ha)', 'Electronic Helmholtz Free Energy (Ha)', 'Vibrational Helmholtz Free Energy (Ha)', 'Translational Helmholtz Free Energy (Ha)', 'Rotational Helmholtz Free Energy (Ha)', 'Gibbs Free Energy (Ha)', 'Electronic Gibbs Free Energy (Ha)', 'Vibrational Gibbs Free Energy (Ha)', 'Translational Gibbs Free Energy (Ha)', 'Rotational Gibbs Free Energy (Ha)', 'Enthalpy (Ha)', 'Electronic Enthalpy (Ha)', 'Vibrational Enthalpy (Ha)', 'Translational Enthalpy (Ha)', 'Rotational Enthalpy (Ha)', 'Entropy (Ha/K)', 'Electronic Entropy (Ha/K)', 'Vibrational Entropy (Ha/K)', 'Translational Entropy (Ha/K)', 'Rotational Entropy (Ha/K)', 'Massieu Potential/Helmholtz Free Potential (Ha/K)', 'Electronic Massieu Potential/Helmholtz Free Potential (Ha/K)', 'Vibrational Massieu Potential/Helmholtz Free Potential (Ha/K)', 'Translational Massieu Potential/Helmholtz Free Potential (Ha/K)', 'Rotational Massieu Potential/Helmholtz Free Potential (Ha/K)', 'Planck Potential/Gibbs Free Potential (Ha/K)', 'Electronic Planck Potential/Gibbs Free Potential (Ha/K)', 'Vibrational Planck Potential/Gibbs Free Potential (Ha/K)', 'Translational Planck Potential/Gibbs Free Potential (Ha/K)', 'Rotational Planck Potential/Gibbs Free Potential (Ha/K)'] + ['Molecule', 'Rdkit Molecule', 'Basis', 'Molecule Name', 'Atoms', 'Bonds', 'Rings', 'Weight', 'SCF CPU Runtime', 'SCF Wall Runtime', 'Hessian CPU Runtime', 'Hessian Wall Runtime']
            
            pd.set_option("display.precision", 16)
            entrodf = pd.DataFrame(entropy, index = ["Total","Electronic","Vibrational","Translational","Rotational"])
            
            with st.expander(data['Molecule Name'] + ": " + str(round(data['Real Compute Time'], 2)) + "s"):
                result_col_1, result_col_2 = st.columns([2, 1])
                result_col_1.write(
                    f"{data['Molecule Name']} | {data['Basis']}")
                result_col_1.write(f"SCF CPU Runtime: {data['SCF CPU Runtime']}s")
                result_col_1.write(f"SCF Wall Runtime: {data['SCF Wall Runtime']}s")
                result_col_1.write(f"Hessian CPU Runtime: {data['Hessian CPU Runtime']}s")
                result_col_1.write(f"Hessian Wall Runtime: {data['Hessian Wall Runtime']}s")
                result_col_1.write(
                    f"\# of Atoms: {data['Atoms']} | \# of Bonds: {data['Bonds']} | \# of Rings:  {data['Rings']}")
                result_col_1.write(
                    f"Molecular Weight: {data['Weight']}")
                # energy data
                for key, value in data.items():
                    if key not in excluded_keys:
                        result_col_1.write(f"{key}: {value}")

                with result_col_2:
                    speck_plot(
                        data['Molecule'], component_h=200, component_w=200, wbox_height="auto", wbox_width="auto")
                    st.image(MolToImage(data['Rdkit Molecule'], size=(200, 200)))
                    st.image(MolToImage(Chem.MolFromSmiles(data['Smiles']), size=(200, 200)))
                # linebreak
                st.write("")
                st.write("")
                
                
                col_config = {i:st.column_config.NumberColumn(i, format="%.4f") for i in enerdf.columns}
                st.dataframe(
                    data=enerdf, 
                    use_container_width=True,
                    column_config=col_config
                )
                col_config = {i:st.column_config.NumberColumn(i, format="%.4f") for i in entrodf.columns}
                st.dataframe(
                    data=entrodf, 
                    use_container_width=True,
                    column_config=col_config
                )
                

with tab2:
    # st.subheader("Comparative Graphs (WIP)")
    
    def count_atoms(molecule):
    # Check that there is a valid molecule
        if molecule:

            # Add hydrogen atoms--RDKit excludes them by default
            molecule_with_Hs = Chem.AddHs(molecule)
            comp = defaultdict(lambda: 0)

            # Get atom counts
            for atom in molecule_with_Hs.GetAtoms():
                comp[atom.GetAtomicNum()] += 1

            # # If charged, add charge as "atomic number" 0
            # charge = GetFormalCharge(molecule_with_Hs)
            # if charge != 0:
            #     comp[0] = charge
            return comp

    if 'results' in st.session_state and len(st.session_state['results']) > 1:
        st.subheader("Comparative Graphs")

        independent = [
            'Atoms',
            'Bonds',
            # 'Rings',
            'Weight',
        ]
        
        exclude = [
            'Basis',
            'Rings',
            'Rdkit Molecule',
            'Converged SCF-HF Electronic Energy (Ha)',
            'Molecule',
            'Molecule Name',
            'Smiles',
            'Real Compute Time'
        ]
        
        dependent = [i for i in st.session_state['results'][0].keys() if i not in independent]
        dependent = [i for i in dependent if i not in exclude]
        # print(dependent)
        
        df_columns = list(st.session_state['results'][0].keys())
        df_columns.remove('Rdkit Molecule')
        
        df = pd.DataFrame(st.session_state['results'], columns=df_columns)
        
        
        for label in independent:
            for target in dependent:
                # print(label, target)
                # print(df[label].values, df[target].values)
                # Linear Regression
                coeffs_linear = np.polyfit(
                    df[label].values, df[target].values, 1)
                poly1d_fn_linear = np.poly1d(coeffs_linear)
                x = np.linspace(min(df[label]), max(df[label]), 100)

                # Quadratic Regression
                coeffs_quad = np.polyfit(
                    df[label].values, df[target].values, 2)
                poly1d_fn_quad = np.poly1d(coeffs_quad)
                
                # calculate R^2
                r2_linear = r2_score(df[target], poly1d_fn_linear(df[label]))
                r2_quad = r2_score(df[target], poly1d_fn_quad(df[label]))
                
                if r2_linear >= trend_threshold or r2_quad >= trend_threshold:
                    st.markdown(f'### Number of {label} vs. {target}')
                    # Display Equations
                    st.markdown(
                        f"<span style='color: red;'>Best Fit Linear Equation ({target}): Y = {coeffs_linear[0]:.4f}x + {coeffs_linear[1]:.4f} (R^2 = {r2_linear:.4f})</span>", unsafe_allow_html=True)
                    st.markdown(
                        f"<span style='color: green;'>Best Fit Quadratic Equation ({target}): Y = {coeffs_quad[0]:.4f}xÂ² + {coeffs_quad[1]:.4f}x + {coeffs_quad[2]:.4f} (R^2 = {r2_quad:.4f})</span>", unsafe_allow_html=True)

                    # Create a DataFrame for the regression lines
                    df_line = pd.DataFrame(
                        {label: x, 'Linear': poly1d_fn_linear(x), 'Quadratic': poly1d_fn_quad(x)})

                    # Plot
                    scatter = alt.Chart(df).mark_circle(size=60).encode(
                        x=label,
                        y=target,
                        tooltip=[label, target]
                    )

                    line_linear = alt.Chart(df_line).mark_line(color='red').encode(
                        x=label,
                        y='Linear'
                    )

                    line_quad = alt.Chart(df_line).mark_line(color='green').encode(
                        x=label,
                        y='Quadratic'
                    )

                    # Display the plot
                    st.altair_chart(scatter + line_linear +
                                    line_quad, use_container_width=True)
        
        
        # for atomic_num, count in count_atoms(st.session_state['results'][0]['rdkit_mol']).items():
        
        # atom_counts = [count_atoms(result_item['rdkit_mol'])
        #                for result_item in st.session_state['results']]

        # # Prepare datasets
        # num_atoms = [result_item['atoms']
        #              for result_item in st.session_state['results']]
        # num_bonds = [result_item['bonds'].GetNumBonds()
        #              for result_item in st.session_state['results']]
        # num_conformers = [result_item[4].GetNumConformers()
        #                   for result_item in st.session_state['results']]
        # # 6 and 1 are atomic code
        # num_carbons = [atom_counts[i][6] for i in range(len(atom_counts))]
        # num_hydrogens = [atom_counts[i][1] for i in range(len(atom_counts))]

        # energies = [result_item[1]
        #             for result_item in st.session_state['results']]
        # runtimes = [result_item[2]
        #             for result_item in st.session_state['results']]

        # df_atoms = pd.DataFrame(
        #     {'Atoms': num_atoms, 'Energy': energies, 'Runtime': runtimes})
        # df_bonds = pd.DataFrame(
        #     {'Bonds': num_bonds, 'Energy': energies, 'Runtime': runtimes})
        # df_conformers = pd.DataFrame(
        #     {'Conformers': num_conformers, 'Energy': energies, 'Runtime': runtimes})
        # df_carbons = pd.DataFrame(
        #     {'Carbons': num_carbons, 'Energy': energies, 'Runtime': runtimes})
        # df_hydrogens = pd.DataFrame(
        #     {'Hydrogens': num_hydrogens, 'Energy': energies, 'Runtime': runtimes})

        # Generate Graphs
        # for df, label in zip([df_atoms, df_bonds, df_carbons, df_hydrogens], ['Atoms', 'Bonds', 'Carbons', 'Hydrogens']):
        #     for target in ['Energy', 'Runtime']:
        #         st.markdown(f'### Number of {label} vs. {target}')

        #         # Linear Regression
        #         coeffs_linear = np.polyfit(
        #             df[label].values, df[target].values, 1)
        #         poly1d_fn_linear = np.poly1d(coeffs_linear)
        #         x = np.linspace(min(df[label]), max(df[label]), 100)

        #         # Quadratic Regression
        #         coeffs_quad = np.polyfit(
        #             df[label].values, df[target].values, 2)
        #         poly1d_fn_quad = np.poly1d(coeffs_quad)

        #         # Display Equations
        #         st.markdown(
        #             f"<span style='color: red;'>Best Fit Linear Equation ({target}): Y = {coeffs_linear[0]:.4f}x + {coeffs_linear[1]:.4f}</span>", unsafe_allow_html=True)
        #         st.markdown(
        #             f"<span style='color: green;'>Best Fit Quadratic Equation ({target}): Y = {coeffs_quad[0]:.4f}xÂ² + {coeffs_quad[1]:.4f}x + {coeffs_quad[2]:.4f}</span>", unsafe_allow_html=True)

        #         # Create a DataFrame for the regression lines
        #         df_line = pd.DataFrame(
        #             {label: x, 'Linear': poly1d_fn_linear(x), 'Quadratic': poly1d_fn_quad(x)})

        #         # Plot
        #         scatter = alt.Chart(df).mark_circle(size=60).encode(
        #             x=label,
        #             y=target,
        #             tooltip=[label, target]
        #         )

        #         line_linear = alt.Chart(df_line).mark_line(color='red').encode(
        #             x=label,
        #             y='Linear'
        #         )

        #         line_quad = alt.Chart(df_line).mark_line(color='green').encode(
        #             x=label,
        #             y='Quadratic'
        #         )

        #         # Display the plot
        #         st.altair_chart(scatter + line_linear +
        #                         line_quad, use_container_width=True)

        #     # Display Equation
        #     # st.write(f"Best Fit Equation ({target}): Y = {coeffs[0]:.4f}x + {coeffs[1]:.4f}")

with tab3:
    with open('output-test.txt', 'r') as file:
        log_data = file.read()
        st.markdown(f'```\n{log_data}\n```')


# xyzview = py3Dmol.view(query='pdb:1A2C')
# xyzview.setStyle({'cartoon':{'color':'spectrum'}})
# showmol(xyzview, height = 500,width=800)

# def draw_with_spheres(mol):
#     v = py3Dmol.view(width=300,height=300)
#     IPythonConsole.addMolToView(mol,v)
#     v.zoomTo()
#     v.setStyle({'sphere':{'radius':0.3},'stick':{'radius':0.2}});
#     v.show()


# Attempt at creating an async queue, need to find a way to detect browser closing to stop the queue

# def runQueue():
#     for i in range(1, 10):
#         time.sleep(1)
#         print("test", str(i))


# if 'queue-running' not in st.session_state:
#     st.session_state['queue-running'] = True
#     t = threading.Thread(target=runQueue)
#     add_script_run_ctx(t)
#     t.start()

# components.html("""<html>
# <script>
#     const origClose = window.close;
#     window.close = () => {
#         console.log("asdf");
#         // origClose();
#     }
#     document.addEventListener("beforeunload", () => {
#                 alert(1);
#                 console.log(a.a.a.a);
#     })
# </script>
# <div style="color: white" onclick="">
#                 hihihihi
# </div>
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Jaydens-MacBook.local', release='23.0.0', version='Darwin Kernel Version 23.0.0: Fri Sep 15 14:41:34 PDT 2023; root:xnu-10002.1.13~1/RELEASE_ARM64_T8103', machine='arm64', processor='arm')  Threads 1
Python 3.8.18 | packaged by conda-forge | (default, Oct 10 2023, 15:46:56) 
[Clang 16.0.6 ]
numpy 1.24.4  scipy 1.10.1
Date: Sun Jun 30 21:58:45 2024
PySCF version 2.4.0
PySCF path  /Users/jaydenl/anaconda3/envs/pyscfui/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 2
[INPUT] num. electrons = 16
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 O      0.000000000000   0.000000000000   0.579366000000 AA    0.000000000000   0.000000000000   1.094843065885 Bohr   0.0
[INPUT]  2 O      0.000000000000   0.000000000000  -0.579366000000 AA    0.000000000000   0.000000000000  -1.094843065885 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] O
[INPUT] 0    0    [8    /2   ]  15330             0.000508 -0.000115
                                2299              0.003929 -0.000895
                                522.4             0.020243 -0.004636
                                147.3             0.079181 -0.018724
                                47.55             0.230687 -0.058463
                                16.76             0.433118 -0.136463
                                6.207             0.35026 -0.17574
                                0.6882            -0.008154 0.603418
[INPUT] 0    0    [1    /1   ]  1.752                1
[INPUT] 0    0    [1    /1   ]  0.2384               1
[INPUT] 1    0    [3    /1   ]  34.46             0.015928
                                7.749             0.09974
                                2.28              0.310492
[INPUT] 1    0    [1    /1   ]  0.7156               1
[INPUT] 1    0    [1    /1   ]  0.214                1
[INPUT] 2    0    [1    /1   ]  2.314                1
[INPUT] 2    0    [1    /1   ]  0.645                1
[INPUT] 3    0    [1    /1   ]  1.428                1

nuclear repulsion = 29.2279332053313
number of shells = 18
number of NR pGTOs = 84
number of NR cGTOs = 60
basis = cc-pVTZ
ecp = {}
CPU time:         7.10


******** <class 'pyscf.scf.uhf.UHF'> ********
method = UHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/_x/xd2ms3z958s6pfllwphw48vm0000gn/T/tmpcuue2gjd
max_memory 4000 MB (current use 0 MB)
number electrons alpha = 8  beta = 8
Set gradient conv threshold to 3.16228e-05
E1 = -265.86436031078676  Ecoul = 86.44334193562811
init E= -150.193085169827
cond(S) = 1066.1426858368727
    CPU time for initialize scf      1.16 sec, wall time      0.19 sec

WARN: alpha nocc = 8  HOMO -0.107255123455229 >= LUMO -0.107255123455228


WARN: beta  nocc = 8  HOMO -0.107379349202583 >= LUMO -0.107379349202582


WARN: system HOMO -0.107379349202583 >= system LUMO -0.107379349202582

  alpha mo_energy =
[-20.62500933 -20.62216288  -1.81419363  -0.9750147   -0.56476658
  -0.56476658  -0.55042109  -0.10725512  -0.10725512   0.42037041
   0.77470666   0.7763442    0.7763442    0.79480889   0.88106748
   0.88106748   0.94991903   1.48223986   1.5449765    1.5449765
   1.67307991   1.67307991   1.99098292   1.99098292   2.49853965
   2.52690274   2.55283028   2.55283028   3.99627005   3.99627005
   4.17919555   4.30363637   4.30363637   5.05715555   5.05715555
   5.21397911   5.21397911   5.26204517   5.38837273   5.38837273
   5.55163535   5.6927828    5.6927828    6.16186929   6.35228732
   6.35228732   6.632302     6.632302     6.83032053   6.83032053
   6.92210001   6.92210001   7.03866188   7.03866188   7.448475
   7.7281506    7.90024442   7.90024442   8.14265995  14.18525915]
  beta  mo_energy =
[-20.63480544 -20.62868259  -1.95186325  -0.96018036  -0.57685573
  -0.57685573  -0.56197671  -0.10737935  -0.10737935   0.41121814
   0.77322951   0.77365311   0.77365311   0.78241467   0.8808282
   0.8808282    0.94075976   1.48202336   1.53965821   1.53965821
   1.66031182   1.66031182   1.99067914   1.99067914   2.49364311
   2.52159204   2.55121407   2.55121407   3.99344179   3.99344179
   4.1719037    4.30167967   4.30167967   5.0500733    5.0500733
   5.20117165   5.20117165   5.26244123   5.38615396   5.38615396
   5.53642144   5.69162911   5.69162911   6.16187205   6.34755545
   6.34755545   6.63067991   6.63067991   6.83062238   6.83062238
   6.9179486    6.9179486    7.03654313   7.03654313   7.4408448
   7.72398246   7.89669671   7.89669671   8.14109368  14.18019572]
multiplicity <S^2> = 0.95058923  2S+1 = 2.1914281
E1 = -261.9722805445639  Ecoul = 83.1671671178166
cycle= 1 E= -149.577180221416  delta_E= 0.616  |g|= 0.438  |ddm|= 1.13
    CPU time for cycle= 1      0.19 sec, wall time      0.03 sec
  alpha nocc = 8  HOMO = -0.559139907338795  LUMO = 0.00306585764836959
  beta  nocc = 8  HOMO = -0.55915002501954  LUMO = 0.00361813146190081
  alpha mo_energy =
[-2.09214245e+01 -2.09202742e+01 -1.82549452e+00 -1.15812913e+00
 -9.07812289e-01 -8.33892493e-01 -7.30033043e-01 -5.59139907e-01
  3.06585765e-03  3.85213917e-01  6.47676760e-01  6.83195134e-01
  7.03401828e-01  7.16379021e-01  7.76716993e-01  8.27022773e-01
  8.29255290e-01  1.39195788e+00  1.39207546e+00  1.39549772e+00
  1.49622682e+00  1.55512515e+00  1.87151349e+00  1.87249937e+00
  2.39554363e+00  2.41718239e+00  2.44355358e+00  2.48032208e+00
  3.77304565e+00  3.83659326e+00  3.97569901e+00  4.08162368e+00
  4.14042480e+00  4.87538127e+00  4.87541226e+00  4.96574464e+00
  4.98688885e+00  5.11496113e+00  5.22198946e+00  5.22201615e+00
  5.29653479e+00  5.53357954e+00  5.53358653e+00  6.05276602e+00
  6.15116025e+00  6.15127998e+00  6.43119143e+00  6.43146836e+00
  6.67223346e+00  6.67289916e+00  6.71042108e+00  6.74950987e+00
  6.84999871e+00  6.88574029e+00  7.21027784e+00  7.51663476e+00
  7.72653921e+00  7.74746362e+00  7.98552397e+00  1.39238238e+01]
  beta  mo_energy =
[-2.09210929e+01 -2.09199528e+01 -1.83065297e+00 -1.15664405e+00
 -9.10344073e-01 -8.30619598e-01 -7.32719756e-01 -5.59150025e-01
  3.61813146e-03  3.84728968e-01  6.47546192e-01  6.82904942e-01
  7.03466051e-01  7.17492112e-01  7.76683170e-01  8.27634324e-01
  8.29243389e-01  1.39131462e+00  1.39143160e+00  1.39581461e+00
  1.49564375e+00  1.55468013e+00  1.87174515e+00  1.87272790e+00
  2.39576334e+00  2.41748787e+00  2.44405879e+00  2.48082947e+00
  3.77293317e+00  3.83657499e+00  3.97586185e+00  4.08150561e+00
  4.14035356e+00  4.87466728e+00  4.87469725e+00  4.96425236e+00
  4.98534626e+00  5.11583107e+00  5.22168274e+00  5.22170915e+00
  5.29525200e+00  5.53344187e+00  5.53344886e+00  6.05351373e+00
  6.15040578e+00  6.15052347e+00  6.43099975e+00  6.43127679e+00
  6.67262336e+00  6.67328719e+00  6.71049075e+00  6.74960626e+00
  6.85066078e+00  6.88634818e+00  7.21019467e+00  7.51654518e+00
  7.72659672e+00  7.74749505e+00  7.98624768e+00  1.39234504e+01]
multiplicity <S^2> = 0.97192867  2S+1 = 2.2108177
E1 = -264.5015324977996  Ecoul = 85.63157710882462
cycle= 2 E= -149.642022183644  delta_E= -0.0648  |g|= 0.159  |ddm|= 0.313
    CPU time for cycle= 2      0.22 sec, wall time      0.03 sec
  alpha nocc = 8  HOMO = -0.487717717987927  LUMO = 0.0975577700148008
  beta  nocc = 8  HOMO = -0.487870588010586  LUMO = 0.0977604823545792
  alpha mo_energy =
[-20.71009646 -20.70891445  -1.69325738  -1.08288464  -0.82476927
  -0.74697583  -0.62779682  -0.48771772   0.09755777   0.43510349
   0.68450762   0.72664614   0.72858122   0.80322399   0.80558498
   0.87335643   0.88341179   1.43625995   1.46108169   1.46111953
   1.57093714   1.62781971   1.92853825   1.92951376   2.44938686
   2.48278357   2.49013074   2.53016648   3.88254318   3.96190396
   4.10040859   4.19052229   4.26247878   4.97076923   4.970797
   5.08190464   5.10415142   5.20945374   5.3123295    5.31237051
   5.43182477   5.62178595   5.6217892    6.12707129   6.26023788
   6.26034414   6.55457218   6.55483081   6.77599904   6.77689609
   6.82888188   6.8753635    6.95789345   6.99959346   7.35148552
   7.64829325   7.81931465   7.84217296   8.08725297  14.08237225]
  beta  mo_energy =
[-20.71005491 -20.7088743   -1.69565523  -1.08199347  -0.82593445
  -0.74502918  -0.62899193  -0.48787059   0.09776048   0.43465603
   0.68433763   0.72675957   0.72829842   0.80310835   0.80607478
   0.8732571    0.88372434   1.43634204   1.46080339   1.46084134
   1.5707986    1.62767698   1.92862791   1.929602     2.44949223
   2.48289128   2.49035537   2.53039036   3.88243094   3.96184415
   4.10055788   4.19040959   4.26239216   4.970457     4.97048407
   5.08121394   5.10341905   5.20994822   5.31214702   5.31218775
   5.43127461   5.62167474   5.62167799   6.12745869   6.25983507
   6.25994014   6.55437099   6.55462969   6.77611586   6.77701164
   6.82892684   6.87542154   6.95822991   6.99989003   7.35145118
   7.64813989   7.81934109   7.84217659   8.08765153  14.08210019]
multiplicity <S^2> = 0.98726914  2S+1 = 2.224652
E1 = -263.8490888740066  Ecoul = 84.97156194070465
cycle= 3 E= -149.649593727971  delta_E= -0.00757  |g|= 0.0365  |ddm|= 0.064
    CPU time for cycle= 3      0.23 sec, wall time      0.03 sec
  alpha nocc = 8  HOMO = -0.501571263412818  LUMO = 0.103014411584843
  beta  nocc = 8  HOMO = -0.501822012351754  LUMO = 0.102910060843539
  alpha mo_energy =
[-20.72488397 -20.72373238  -1.69562572  -1.08480401  -0.83499361
  -0.75008961  -0.62265524  -0.50157126   0.10301441   0.43426232
   0.68279182   0.72592022   0.73165069   0.80093051   0.80371796
   0.87557905   0.88381723   1.43641629   1.46156631   1.46159796
   1.56995883   1.6283416    1.92887251   1.92983176   2.44787473
   2.48066033   2.4880271    2.53051993   3.87420741   3.96102778
   4.09670482   4.18339057   4.26165291   4.97027204   4.97029477
   5.08078216   5.10401906   5.20531562   5.31217552   5.31222329
   5.42934251   5.62145372   5.62145481   6.12343257   6.25945994
   6.25955181   6.55127461   6.55151014   6.77248783   6.77356633
   6.82289479   6.87359127   6.95215581   6.99781964   7.34808712
   7.6437025    7.8168934    7.84086196   8.08330832  14.07693923]
  beta  mo_energy =
[-20.72497514 -20.72382176  -1.69607951  -1.08462944  -0.83528111
  -0.74940348  -0.62291337  -0.50182201   0.10291006   0.43402905
   0.68270122   0.72595864   0.73155382   0.80084135   0.80383475
   0.87549762   0.88393294   1.43639755   1.46152826   1.46155992
   1.57007989   1.62838176   1.9288543    1.92981386   2.44791403
   2.48067803   2.48807216   2.53056194   3.87412139   3.96095485
   4.09676927   4.18330132   4.26157098   4.97025827   4.97028082
   5.08072109   5.10393674   5.20543823   5.312109     5.31215669
   5.42932494   5.62138962   5.6213907    6.12351957   6.2593557
   6.25944718   6.55113802   6.55137357   6.77244292   6.77352098
   6.82289819   6.87359274   6.95222763   6.99787342   7.34809713
   7.64360094   7.81692306   7.84087982   8.08341652  14.07682436]
multiplicity <S^2> = 1.0040744  2S+1 = 2.2397092
E1 = -263.8990140968259  Ecoul = 85.02014712108024
cycle= 4 E= -149.650933770414  delta_E= -0.00134  |g|= 0.0131  |ddm|= 0.042
    CPU time for cycle= 4      0.12 sec, wall time      0.02 sec
  alpha nocc = 8  HOMO = -0.503222999490472  LUMO = 0.105351250057747
  beta  nocc = 8  HOMO = -0.503352093292123  LUMO = 0.105277165649802
  alpha mo_energy =
[-20.72018141 -20.71902823  -1.6955679   -1.08309404  -0.83637229
  -0.74851584  -0.62041771  -0.503223     0.10535125   0.43457139
   0.68201103   0.72622404   0.73240895   0.8003356    0.80478907
   0.87672735   0.88387016   1.43688071   1.46135738   1.46137723
   1.56995806   1.62882673   1.92912627   1.93005802   2.44865818
   2.48141378   2.48838926   2.53136819   3.87446294   3.96356347
   4.09790931   4.18361887   4.26378216   4.97038097   4.97039542
   5.08046359   5.10379369   5.20715992   5.31232511   5.31237378
   5.42964018   5.62169939   5.62170111   6.12502134   6.25950302
   6.25959433   6.55238301   6.55260452   6.77389512   6.77501438
   6.82363741   6.87545097   6.95311342   6.99976594   7.34904802
   7.64538283   7.817539     7.84155206   8.08490698  14.07841568]
  beta  mo_energy =
[-20.7202224  -20.7190688   -1.69563948  -1.08307883  -0.83644898
  -0.74832564  -0.6204727   -0.50335209   0.10527717   0.4344973
   0.68198041   0.72623779   0.73238195   0.80029813   0.80482441
   0.8766943    0.8839059    1.43686853   1.46136012   1.46138003
   1.57001663   1.62886453   1.92911121   1.93004299   2.44867134
   2.48141416   2.48839512   2.53137369   3.87441895   3.9635286
   4.09793409   4.18357725   4.26374657   4.9703947    4.97040915
   5.0804763    5.1038004    5.20718794   5.31230574   5.3123544
   5.42966149   5.62167601   5.62167773   6.12503982   6.2594817
   6.25957294   6.55232693   6.55254846   6.77386034   6.77497958
   6.82363496   6.87544711   6.95312525   6.99977269   7.34905387
   7.64534552   7.81755072   7.84155961   8.08493297  14.07837845]
multiplicity <S^2> = 1.0121583  2S+1 = 2.2469164
E1 = -263.89684686327143  Ecoul = 85.01757592505002
cycle= 5 E= -149.65133773289  delta_E= -0.000404  |g|= 0.00906  |ddm|= 0.0208
    CPU time for cycle= 5      0.15 sec, wall time      0.02 sec
  alpha nocc = 8  HOMO = -0.505313384147984  LUMO = 0.105582562544613
  beta  nocc = 8  HOMO = -0.50525211745181  LUMO = 0.10561736719055
  alpha mo_energy =
[-20.72150596 -20.72035589  -1.69625771  -1.08370958  -0.83805561
  -0.74889123  -0.62003083  -0.50531338   0.10558256   0.43406962
   0.68135179   0.72600481   0.73249325   0.7996103    0.80416924
   0.87678052   0.88341675   1.4365363    1.46087022   1.46088333
   1.56926494   1.62839394   1.9286509    1.92959065   2.44807999
   2.48085556   2.48771562   2.53093374   3.87298225   3.96318021
   4.0970855    4.18227849   4.26334633   4.96964847   4.96965797
   5.07979153   5.10298438   5.20635484   5.31160191   5.31165033
   5.42875488   5.62096615   5.62096829   6.12417336   6.25869294
   6.25878875   6.55141996   6.55164787   6.77293811   6.77407804
   6.82241019   6.87473284   6.95197636   6.99897335   7.34810752
   7.64448292   7.81683072   7.84058042   8.08398814  14.07742565]
  beta  mo_energy =
[-20.72147735 -20.7203278   -1.69620388  -1.08373251  -0.83801069
  -0.74903567  -0.61998895  -0.50525212   0.10561737   0.43412406
   0.68137031   0.72599669   0.73251269   0.79963043   0.80415085
   0.87680123   0.88339568   1.43654555   1.46087574   1.46088893
   1.56922178   1.62837497   1.92866029   1.92959996   2.44806869
   2.480853     2.48770803   2.53092782   3.87299973   3.96319769
   4.09707214   4.18229828   4.26336678   4.96964155   4.96965109
   5.07978415   5.10298197   5.20633473   5.31161622   5.31166466
   5.42873649   5.62098179   5.62098393   6.12415995   6.25871079
   6.25880667   6.55145134   6.55167927   6.7729522    6.77409225
   6.82240867   6.8747325    6.95196454   6.9989659    7.34810215
   7.64450764   7.81682173   7.84057408   8.08396839  14.07744982]
multiplicity <S^2> = 1.0202494  2S+1 = 2.2541068
E1 = -263.903601679218  Ecoul = 85.02390085251719
cycle= 6 E= -149.651767621369  delta_E= -0.00043  |g|= 0.00498  |ddm|= 0.033
    CPU time for cycle= 6      0.25 sec, wall time      0.04 sec
  alpha nocc = 8  HOMO = -0.504943076804876  LUMO = 0.106416031342441
  beta  nocc = 8  HOMO = -0.50485451380767  LUMO = 0.106467483986792
  alpha mo_energy =
[-20.72027925 -20.71912842  -1.69552536  -1.08318337  -0.83757467
  -0.74827808  -0.6193902   -0.50494308   0.10641603   0.43439519
   0.68166983   0.72625871   0.73283677   0.79987007   0.80482554
   0.87717256   0.88388787   1.43686681   1.46138578   1.46141104
   1.56977031   1.62906424   1.92912096   1.93008107   2.44859526
   2.48139343   2.48815678   2.53143907   3.8737595    3.96408694
   4.09795041   4.18304257   4.26423467   4.97038533   4.9703965
   5.08065055   5.10370037   5.20711181   5.3123149    5.31236289
   5.42964591   5.62167961   5.62168128   6.12492422   6.25947863
   6.25957804   6.5523195    6.55255578   6.77378769   6.77493587
   6.8232928    6.87564475   6.95287483   6.99986833   7.34902862
   7.64532855   7.81768871   7.84128234   8.0848283   14.07836483]
  beta  mo_energy =
[-20.7202575  -20.71910671  -1.69547935  -1.08319081  -0.83752434
  -0.74839112  -0.61935735  -0.50485451   0.10646748   0.43443832
   0.68168775   0.72624903   0.7328535    0.79989418   0.80479806
   0.87719304   0.88386394   1.43687302   1.46138172   1.46140681
   1.56973976   1.62903713   1.92913074   1.93009092   2.44858781
   2.4813941    2.48815465   2.53143641   3.87379135   3.96411005
   4.09793244   4.18307107   4.26425719   4.97037662   4.97038777
   5.08064431   5.10369706   5.20709328   5.31232612   5.31237412
   5.4296365    5.62169375   5.62169542   6.12491135   6.25949012
   6.2595895    6.55235538   6.55259162   6.7738118    6.77495992
   6.82329459   6.87564699   6.95286754   6.99986347   7.3490252
   7.64535027   7.8176819    7.84127807   8.08481178  14.07838758]
multiplicity <S^2> = 1.0231238  2S+1 = 2.2566558
E1 = -263.89989629225977  Ecoul = 85.02002430974319
cycle= 7 E= -149.651938777185  delta_E= -0.000171  |g|= 0.000965  |ddm|= 0.0327
    CPU time for cycle= 7      0.21 sec, wall time      0.03 sec
  alpha nocc = 8  HOMO = -0.504423099484993  LUMO = 0.105701653979469
  beta  nocc = 8  HOMO = -0.504402533212289  LUMO = 0.105712412352717
  alpha mo_energy =
[-20.72076292 -20.71961164  -1.69577584  -1.08337745  -0.8374299
  -0.74858645  -0.61984811  -0.5044231    0.10570165   0.4343334
   0.68163966   0.7261551    0.73261725   0.79988371   0.80457547
   0.87693353   0.88373306   1.43675284   1.46121979   1.46123888
   1.56960389   1.62881935   1.92896772   1.92991521   2.44842459
   2.48120579   2.48803882   2.53126608   3.8736309    3.96365351
   4.09763159   4.18289021   4.26383246   4.97014374   4.97015462
   5.08043141   5.10340197   5.20683545   5.31208295   5.31213062
   5.42934305   5.62145026   5.62145209   6.12467271   6.25922772
   6.25932529   6.55201897   6.55224911   6.77350622   6.77464522
   6.82306928   6.87526356   6.95262867   6.99949479   7.34871212
   7.6450299    7.81746314   7.84100262   8.08453607  14.07804227]
  beta  mo_energy =
[-20.72075951 -20.71960826  -1.69576675  -1.08337699  -0.83741911
  -0.74860079  -0.61984461  -0.50440253   0.10571241   0.43433966
   0.68164467   0.72615386   0.73261922   0.79988939   0.80456973
   0.87693706   0.88372744   1.43675315   1.46121693   1.46123596
   1.56959981   1.62881651   1.92896874   1.92991618   2.44842514
   2.48120641   2.48803936   2.53126617   3.87363921   3.96365896
   4.09762796   4.182897     4.26383691   4.97014271   4.97015357
   5.08043202   5.10340304   5.2068324    5.31208441   5.31213207
   5.42934496   5.62145241   5.62145423   6.1246708    6.2592293
   6.25932686   6.55202663   6.55225674   6.77351244   6.7746514
   6.82307079   6.87526511   6.9526285    6.99949481   7.34871227
   7.6450336    7.81746261   7.84100265   8.08453385  14.07804656]
multiplicity <S^2> = 1.0230163  2S+1 = 2.2565604
E1 = -263.90023036039327  Ecoul = 85.02035488339862
cycle= 8 E= -149.651942271663  delta_E= -3.49e-06  |g|= 0.000113  |ddm|= 0.00483
    CPU time for cycle= 8      0.19 sec, wall time      0.03 sec
  alpha nocc = 8  HOMO = -0.504546199705195  LUMO = 0.105847811306886
  beta  nocc = 8  HOMO = -0.504539196833961  LUMO = 0.105850690250403
  alpha mo_energy =
[-20.72072956 -20.71957822  -1.69575597  -1.08336122  -0.83746282
  -0.74858502  -0.61979515  -0.5045462    0.10584781   0.434348
   0.68164283   0.72615798   0.7326417    0.79988461   0.80459227
   0.87696883   0.88374512   1.4367636    1.46123014   1.46124958
   1.56960484   1.62885076   1.92897918   1.9299285    2.44843912
   2.48121922   2.48804196   2.53128985   3.87363801   3.96369731
   4.09765147   4.18289707   4.26387199   4.97016238   4.97017328
   5.08044844   5.10342775   5.20685401   5.31210061   5.31214836
   5.42936892   5.62146786   5.62146967   6.12468979   6.25924822
   6.25934602   6.55204487   6.55227575   6.77353027   6.77467082
   6.82308426   6.87530078   6.95264185   6.99952958   7.34874065
   7.64505685   7.81747838   7.84102824   8.08455903  14.07807162]
  beta  mo_energy =
[-20.72072807 -20.71957675  -1.69574924  -1.08336187  -0.83745712
  -0.74859184  -0.61979179  -0.5045392    0.10585069   0.43435065
   0.68164474   0.72615746   0.73264301   0.79988666   0.80459049
   0.87697021   0.88374316   1.43676371   1.46122966   1.46124908
   1.5696036    1.62884982   1.92897921   1.92992853   2.44843905
   2.48121927   2.48804173   2.53128946   3.87364096   3.9636992
   4.09765044   4.18289952   4.26387364   4.97016254   4.97017344
   5.08044958   5.10342913   5.2068526    5.3121014    5.31214915
   5.42937019   5.62146874   5.62147054   6.12468891   6.25924949
   6.25934728   6.55204785   6.55227872   6.7735322    6.77467274
   6.82308496   6.87530148   6.95264161   6.99952948   7.34874097
   7.64505856   7.81747823   7.84102832   8.08455802  14.07807352]
multiplicity <S^2> = 1.0230399  2S+1 = 2.2565814
E1 = -263.90017521297125  Ecoul = 85.02029971463767
cycle= 9 E= -149.651942293002  delta_E= -2.13e-08  |g|= 1.8e-05  |ddm|= 0.000401
    CPU time for cycle= 9      0.18 sec, wall time      0.02 sec
  alpha nocc = 8  HOMO = -0.504520199356723  LUMO = 0.105826422472812
  beta  nocc = 8  HOMO = -0.504518060288958  LUMO = 0.105827289401564
  alpha mo_energy =
[-20.72073178 -20.71958044  -1.69575474  -1.08336287  -0.83745098
  -0.74858946  -0.61980355  -0.5045202    0.10582642   0.4343482
   0.68164502   0.72615678   0.73263877   0.79988687   0.80458942
   0.87696424   0.88374334   1.43676272   1.46122904   1.46124846
   1.56960579   1.62884628   1.92897828   1.92992737   2.44843775
   2.48121765   2.48804237   2.53128695   3.87364094   3.96369254
   4.09764904   4.18289955   4.26386771   4.97016092   4.97017182
   5.08044851   5.10342516   5.20685164   5.31209946   5.31214719
   5.42936729   5.62146677   5.62146857   6.12468799   6.25924697
   6.25934473   6.55204403   6.55227483   6.77352922   6.77466957
   6.82308459   6.87529669   6.9526418    6.99952566   7.34873834
   7.64505536   7.81747763   7.84102551   8.08455671  14.07806996]
  beta  mo_energy =
[-20.72073119 -20.71957986  -1.6957529   -1.08336278  -0.83744924
  -0.74859126  -0.61980243  -0.50451806   0.10582729   0.43434898
   0.6816456    0.72615662   0.73263919   0.79988751   0.80458918
   0.87696469   0.88374286   1.43676281   1.4612289    1.46124831
   1.56960529   1.62884596   1.92897826   1.92992735   2.4484377
   2.48121767   2.48804228   2.53128682   3.87364186   3.96369315
   4.09764886   4.18290032   4.26386825   4.97016094   4.97017183
   5.08044874   5.10342547   5.20685136   5.31209972   5.31214745
   5.42936755   5.62146705   5.62146885   6.12468785   6.25924737
   6.25934513   6.55204498   6.55227578   6.77352985   6.77467019
   6.82308489   6.87529699   6.95264185   6.99952576   7.34873851
   7.64505596   7.8174776    7.84102555   8.08455653  14.07807055]
multiplicity <S^2> = 1.0230358  2S+1 = 2.2565778
E1 = -263.9001594242729  Ecoul = 85.02028392563508
cycle= 10 E= -149.651942293306  delta_E= -3.04e-10  |g|= 4.29e-06  |ddm|= 4.41e-05
    CPU time for cycle= 10      0.17 sec, wall time      0.02 sec
  alpha nocc = 8  HOMO = -0.504523731352294  LUMO = 0.105830302554353
  beta  nocc = 8  HOMO = -0.504522679970322  LUMO = 0.105830725418452
  alpha mo_energy =
[-20.72073179 -20.71958045  -1.69575438  -1.08336293  -0.83745201
  -0.74858994  -0.61980214  -0.50452373   0.1058303    0.43434844
   0.68164493   0.7261568    0.73263928   0.79988676   0.80458936
   0.87696506   0.88374321   1.43676277   1.461229     1.46124843
   1.56960535   1.62884662   1.92897831   1.92992744   2.44843781
   2.48121772   2.48804219   2.53128723   3.87364065   3.96369323
   4.09764898   4.18289927   4.26386831   4.97016095   4.97017185
   5.08044843   5.10342536   5.20685159   5.31209956   5.31214729
   5.42936734   5.62146687   5.62146867   6.12468801   6.25924708
   6.25934485   6.55204426   6.55227508   6.7735294    6.77466978
   6.82308438   6.87529707   6.95264158   6.99952598   7.34873837
   7.64505547   7.81747755   7.84102571   8.08455671  14.07807005]
  beta  mo_energy =
[-20.7207315  -20.71958017  -1.69575349  -1.08336285  -0.83745115
  -0.74859077  -0.61980159  -0.50452268   0.10583073   0.4343488
   0.68164521   0.72615672   0.73263949   0.79988706   0.80458926
   0.87696528   0.88374299   1.43676281   1.46122893   1.46124836
   1.56960512   1.62884647   1.92897829   1.92992743   2.44843779
   2.48121772   2.48804214   2.53128716   3.8736411    3.96369353
   4.09764891   4.18289965   4.26386858   4.97016096   4.97017186
   5.08044854   5.10342552   5.20685147   5.31209968   5.31214742
   5.42936747   5.62146701   5.62146881   6.12468796   6.25924728
   6.25934504   6.55204473   6.55227555   6.77352972   6.77467009
   6.82308454   6.87529723   6.95264161   6.99952604   7.34873846
   7.64505577   7.81747754   7.84102573   8.08455664  14.07807033]
multiplicity <S^2> = 1.0230363  2S+1 = 2.2565782
E1 = -263.9001642384021  Ecoul = 85.02028873975019
Extra cycle  E= -149.651942293321  delta_E= -1.41e-11  |g|= 1.97e-06  |ddm|= 3.62e-06
    CPU time for scf_cycle      3.28 sec, wall time      0.50 sec
    CPU time for SCF      3.28 sec, wall time      0.50 sec
converged SCF energy = -149.651942293321  <S^2> = 1.0230363  2S+1 = 2.2565782
    CPU time for UHF partial hessian      5.84 sec, wall time      4.58 sec
    CPU time for UHF hessian      8.18 sec, wall time      6.06 sec
E1 = -263.9001642384021  Ecoul = 85.02028873975019
E1 = -263.9001642384021  Ecoul = 85.02028873975019
